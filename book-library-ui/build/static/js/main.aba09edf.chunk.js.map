{"version":3,"sources":["store/actions/types.js","store/actions/bookAction.js","store/reducers/bookReducer.js","store/reducers/index.js","utils/axios.js","store/sagas/bookSaga.js","store/sagas/index.js","store/index.js","router.js","App.js","serviceWorker.js","index.js"],"names":["FETCH_BOOK_LIST","BOOK_LIST","fetchBookList","type","actions","bookList","data","initialState","bookReducer","state","action","rootReducers","combineReducers","routing","routerReducer","instance","axios","create","timeout","headers","interceptors","request","use","reqConfig","error","Promise","reject","response","status","localStorage","clear","sessionStorage","store","dispatch","push","fetchBookListActionEffect","fetchBookListActionWatcher","rootSaga","method","url","call","console","log","put","takeLatest","all","fork","bookSaga","middlewares","history","createBrowserHistory","basename","routerMiddleware","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","createStore","run","Book","lazy","router","onUpdate","window","scrollTo","fallback","exact","from","to","path","component","muiTheme","createMuiTheme","App","props","ThemeProvider","theme","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mHAAA,oEAAO,IAAMA,EAAkB,kBAClBC,EAAY,a,gCCDzB,gFAEO,SAASC,IACd,MAAO,CACLC,KAAMC,KAIH,SAASC,EAASC,GACzB,MAAO,CACLH,KAAMC,IACNC,SAAUC,K,wOCVNC,EAAe,GAcNC,EAbK,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAEpD,OAAQA,EAAOP,MAEb,KAAKC,IACH,OAAO,2BACFK,GADL,IAEEJ,SAAUK,EAAOL,WAElB,QACD,OAAOI,ICRAE,EAAeC,YAAgB,CAC1CC,QAASC,gBACTN,gB,gCCHIO,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAS,IACTC,QAAS,CAAE,eAAgB,sBAG7BJ,EAASK,aAAaC,QAAQC,KAC5B,SAAAC,GAME,OALKA,EAAUJ,UACbI,EAAUJ,QAAU,IAEtBI,EAAUL,QAAU,KAEbK,KAET,SAAAC,GACE,OAAOC,QAAQC,OAAOF,MAI1BT,EAASK,aAAaO,SAASL,KAC7B,SAAAK,GAAQ,OAAIA,KACZ,SAAAH,GAaE,MAZqB,qBAAVA,GAG0B,qBAAnBA,EAAMG,UAEa,MAA1BH,EAAMG,SAASC,SAExBC,aAAaC,QACbC,eAAeD,QACfE,EAAMC,SAASC,eAAK,YAGfT,QAAQC,OAAOF,EAAMG,aAIjBZ,Q,mBCxBGoB,G,WAmBAC,G,WAIQC,GAjC1B,SAASnC,IACP,OAAOc,EAAMK,QAAQ,CACnBiB,OAAQ,MACRC,IAAK,oCACLpB,QAAS,CACP,eAAgB,sBAKf,SAAWgB,IAAX,yEAEc,OAFd,kBAEoBK,YAAKtC,GAFzB,qBAEKI,EAFL,EAEKA,MAFL,iBAOD,OAFAmC,QAAQC,IAAI,qBALX,SAOKC,YAAItC,YAASC,IAPlB,iFAcHmC,QAAQC,IAAI,mCAdT,sDAmBA,SAAWN,IAAX,iEACL,OADK,SACCQ,YAAWxC,IAAyB+B,GADrC,uCAIQ,SAAWE,IAAX,iEACb,OADa,SACPQ,YAAI,CACRC,YAAKV,KAFM,uC,eCpCWC,GAAX,SAAWA,IAAX,iEACX,OADW,SACLQ,YAAI,CACVE,MAFW,uC,iBCIXC,EAAc,GAEZC,EAAUC,YAAqB,CAAEC,SAAU,YAEjDH,EAAYd,KAAKkB,2BAAiBH,IAElC,IAAMI,EAAiBC,cACvBN,EAAYd,KAAKmB,GAMf,IAAIE,EAAaC,IAAe,WAAf,EAAmBR,GAMpC,IAAMhB,EAAQyB,YAAY9C,EAAc4C,GAExCF,EAAeK,IAAIrB,G,YCxBfsB,EAAOC,gBAAK,kBAAM,gCAeTC,EAZb,kBAAC,IAAD,CAAQC,SAAU,kBAAMC,OAAOC,SAAS,EAAG,IAAIf,QAASA,GACtD,kBAAC,WAAD,CAAUgB,SAAW,4CACrB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,UAC3B,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWX,IAE5B,kBAAC,IAAD,CAAOU,KAAK,QAAQC,UAAWX,OCN7BY,EAAWC,YAAe,IAUjBC,EANH,SAAAC,GAAK,OAAI,kBAAC,IAAD,CAAU1C,MAAOA,GACnC,kBAAC2C,EAAA,EAAD,CAAeC,MAAOL,GAClBV,KCFagB,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnE,GACLiB,QAAQjB,MAAMA,EAAMoE,c","file":"static/js/main.aba09edf.chunk.js","sourcesContent":["export const FETCH_BOOK_LIST = 'FETCH_BOOK_LIST'; \r\nexport const BOOK_LIST = 'BOOK_LIST';\r\n","import * as actions from './types';\n\nexport function fetchBookList() {\n  return { \n    type: actions.FETCH_BOOK_LIST,\n   };\n}\n\nexport function bookList(data) {\nreturn {\n  type: actions.BOOK_LIST,\n  bookList: data\n  };\n}\n","import * as actions from '../actions/types';\nconst initialState = {};\nconst bookReducer = (state = initialState, action) => {\n\n  switch (action.type) {\n    \n    case actions.BOOK_LIST:\n      return {\n        ...state,\n        bookList: action.bookList,\n      };\n       default:\n      return state;\n      }\n}\nexport default bookReducer;\n","import { combineReducers } from 'redux'\nimport { routerReducer } from \"react-router-redux\";\nimport bookReducer from './bookReducer';\n\nexport const rootReducers = combineReducers({\n  routing: routerReducer,\n  bookReducer\n  });\n","import axios from 'axios'\nimport {store} from '../store'\nimport { push } from 'react-router-redux'\nconst instance = axios.create({\n  timeout: 1000 * 10,\n  headers: { 'Content-Type': 'application/json' }\n})\n\ninstance.interceptors.request.use(\n  reqConfig => {\n    if (!reqConfig.headers) {\n      reqConfig.headers = {}\n    }\n    reqConfig.timeout = 15000\n\n    return reqConfig\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\ninstance.interceptors.response.use(\n  response => response,\n  error => {\n    if (typeof error === 'undefined') {\n      // request cancelled\n      // when backend server is not available at all\n    } else if (typeof error.response === 'undefined') {\n      // when request is timeout\n    } else if (error.response.status === 401) {\n      // apply refresh token logic here instead of redirecting to login\n      localStorage.clear()\n      sessionStorage.clear()\n      store.dispatch(push('/login'))\n    }\n\n    return Promise.reject(error.response)\n  }\n)\n\nexport default instance\n","import { call, put, takeLatest, all, fork } from 'redux-saga/effects'\nimport * as actions from '../actions/types'\nimport axios from '../../utils/axios'\n//import urls from '../../utils/urls'\nimport { bookList } from '../actions/bookAction'\n\n\nfunction fetchBookList () {\n  return axios.request({\n    method: 'get',\n    url: \"http://localhost:8080/getAllBooks\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n}\n\nexport function * fetchBookListActionEffect () {\n  try {\n    const { data } = yield call(fetchBookList)\n\n    if (data) {\n      console.log('Book Data fetched')\n\n      yield put(bookList(data))\n    } else {\n      // reject(data);\n    }\n  } catch (e) {\n    //   alert.error(e.message || 'Authentication Error');\n    //   yield put(authError(e));\n    console.log('Error found while fetching book')\n    // if (reject) reject(e);\n  }\n}\n\nexport function * fetchBookListActionWatcher () {\n  yield takeLatest(actions.FETCH_BOOK_LIST, fetchBookListActionEffect)\n}\n\nexport default function * rootSaga() {\n  yield all([\n    fork(fetchBookListActionWatcher),\n\n  ])\n}\n","import { all } from 'redux-saga/effects'\nimport bookSaga from './bookSaga';\n\n\nexport default function * rootSaga () {\n    yield all([\n    bookSaga()\n    ]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootReducers } from \"./reducers/index\";\nimport  rootSaga  from \"./sagas/index\";\nimport freeze from \"redux-freeze\";\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from \"react-router-redux\";\n\nlet middlewares = [];\n\nconst history = createBrowserHistory({ basename: 'attend/' });\n\nmiddlewares.push(routerMiddleware(history));\n\nconst sagaMiddleware = createSagaMiddleware();\nmiddlewares.push(sagaMiddleware);\n\nif (process.env.NODE_ENV !== 'production') {\n    middlewares.push(freeze);\n  }\n\n  let middleware = applyMiddleware(...middlewares);\n\n  if (process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION__) {\n    middleware = compose(middleware, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n  }\n\n  const store = createStore(rootReducers, middleware);\n\n  sagaMiddleware.run(rootSaga);\n  \n  export { store, history };","import React, {Suspense, lazy} from \"react\";\n// import { Router, Route, IndexRoute, Switch } from \"react-router\";\nimport { Switch, Route, Redirect, Router } from 'react-router-dom';\nimport { history } from \"./store/index\";\n\nconst Book = lazy(() => import('./Pages/Book'));\n\nconst router = (\n  <Router onUpdate={() => window.scrollTo(0, 0)} history={history}>\n    <Suspense fallback ={<div>loading...</div>}>\n    <Switch>\n    <Redirect exact from=\"/\" to=\"/book\" />\n     <Route path=\"/\" component={Book} />\n       \n    <Route path=\"/book\" component={Book} />\n    </Switch>\n    </Suspense>\n  </Router>\n);\n\nexport default router;","import React from 'react';\nimport './App.css';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/index\";\nimport router from \"./router.js\";\n\nconst muiTheme = createMuiTheme({\n    \n});\n\nconst App = props => <Provider store={store}>\n  \t<ThemeProvider theme={muiTheme}>\n      {router}\n    </ThemeProvider>\n  </Provider>;\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}